{"version":3,"file":"filesize.min.js","sources":["../src/constants.js","../src/helpers.js","../src/filesize.js"],"sourcesContent":["// Error Messages\nexport const INVALID_NUMBER = \"Invalid number\";\nexport const INVALID_ROUND = \"Invalid rounding method\";\n\n// Standard Types\nexport const IEC = \"iec\";\nexport const JEDEC = \"jedec\";\nexport const SI = \"si\";\n\n// Unit Types\nexport const BIT = \"bit\";\nexport const BITS = \"bits\";\nexport const BYTE = \"byte\";\nexport const BYTES = \"bytes\";\nexport const SI_KBIT = \"kbit\";\nexport const SI_KBYTE = \"kB\";\n\n// Output Format Types\nexport const ARRAY = \"array\";\nexport const FUNCTION = \"function\";\nexport const OBJECT = \"object\";\nexport const STRING = \"string\";\n\n// Processing Constants\nexport const EXPONENT = \"exponent\";\nexport const ROUND = \"round\";\n\n// Special Characters and Values\nexport const E = \"e\";\nexport const EMPTY = \"\";\nexport const PERIOD = \".\";\nexport const S = \"s\";\nexport const SPACE = \" \";\nexport const ZERO = \"0\";\n\n// Data Structures\nexport const STRINGS = {\n\tsymbol: {\n\t\tiec: {\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\tfullform: {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t}\n};\n\n// Pre-computed lookup tables for performance optimization\nexport const BINARY_POWERS = [\n\t1, // 2^0\n\t1024, // 2^10\n\t1048576, // 2^20\n\t1073741824, // 2^30\n\t1099511627776, // 2^40\n\t1125899906842624, // 2^50\n\t1152921504606846976, // 2^60\n\t1180591620717411303424, // 2^70\n\t1208925819614629174706176 // 2^80\n];\n\nexport const DECIMAL_POWERS = [\n\t1, // 10^0\n\t1000, // 10^3\n\t1000000, // 10^6\n\t1000000000, // 10^9\n\t1000000000000, // 10^12\n\t1000000000000000, // 10^15\n\t1000000000000000000, // 10^18\n\t1000000000000000000000, // 10^21\n\t1000000000000000000000000 // 10^24\n];\n\n// Pre-computed log values for faster exponent calculation\nexport const LOG_2_1024 = Math.log(1024);\nexport const LOG_10_1000 = Math.log(1000);\n","import {\n\tARRAY,\n\tBINARY_POWERS,\n\tBIT,\n\tBITS,\n\tBYTE,\n\tBYTES,\n\tDECIMAL_POWERS,\n\tE,\n\tEMPTY,\n\tEXPONENT,\n\tIEC,\n\tJEDEC,\n\tOBJECT,\n\tPERIOD,\n\tSI,\n\tSTRINGS,\n\tZERO\n} from \"./constants.js\";\n\n// Cached configuration lookup for better performance\nconst STANDARD_CONFIGS = {\n\t[SI]: {isDecimal: true, ceil: 1000, actualStandard: JEDEC},\n\t[IEC]: {isDecimal: false, ceil: 1024, actualStandard: IEC},\n\t[JEDEC]: {isDecimal: false, ceil: 1024, actualStandard: JEDEC}\n};\n\n/**\n * Optimized base configuration lookup\n * @param {string} standard - Standard type\n * @param {number} base - Base number\n * @returns {Object} Configuration object\n */\nexport function getBaseConfiguration (standard, base) {\n\t// Use cached lookup table for better performance\n\tif (STANDARD_CONFIGS[standard]) {\n\t\treturn STANDARD_CONFIGS[standard];\n\t}\n\n\t// Base override\n\tif (base === 2) {\n\t\treturn {isDecimal: false, ceil: 1024, actualStandard: IEC};\n\t}\n\n\t// Default\n\treturn {isDecimal: true, ceil: 1000, actualStandard: JEDEC};\n}\n\n/**\n * Optimized zero value handling\n * @param {number} precision - Precision value\n * @param {string} actualStandard - Standard to use\n * @param {boolean} bits - Whether to use bits\n * @param {Object} symbols - Custom symbols\n * @param {boolean} full - Whether to use full form\n * @param {Array} fullforms - Custom full forms\n * @param {string} output - Output format\n * @param {string} spacer - Spacer character\n * @returns {string|Array|Object|number} Formatted result\n */\nexport function handleZeroValue (precision, actualStandard, bits, symbols, full, fullforms, output, spacer) {\n\tconst result = [];\n\tresult[0] = precision > 0 ? (0).toPrecision(precision) : 0;\n\tconst u = result[1] = STRINGS.symbol[actualStandard][bits ? BITS : BYTES][0];\n\n\tif (output === EXPONENT) {\n\t\treturn 0;\n\t}\n\n\t// Apply symbol customization\n\tif (symbols[result[1]]) {\n\t\tresult[1] = symbols[result[1]];\n\t}\n\n\t// Apply full form\n\tif (full) {\n\t\tresult[1] = fullforms[0] || STRINGS.fullform[actualStandard][0] + (bits ? BIT : BYTE);\n\t}\n\n\t// Return in requested format\n\treturn output === ARRAY ? result : output === OBJECT ? {\n\t\tvalue: result[0],\n\t\tsymbol: result[1],\n\t\texponent: 0,\n\t\tunit: u\n\t} : result.join(spacer);\n}\n\n/**\n * Optimized value calculation with bits handling\n * @param {number} num - Input number\n * @param {number} e - Exponent\n * @param {boolean} isDecimal - Whether to use decimal powers\n * @param {boolean} bits - Whether to calculate bits\n * @param {number} ceil - Ceiling value for auto-increment\n * @returns {Object} Object with val and e properties\n */\nexport function calculateOptimizedValue (num, e, isDecimal, bits, ceil) {\n\tconst d = isDecimal ? DECIMAL_POWERS[e] : BINARY_POWERS[e];\n\tlet result = num / d;\n\n\tif (bits) {\n\t\tresult *= 8;\n\t\t// Handle auto-increment for bits\n\t\tif (result >= ceil && e < 8) {\n\t\t\tresult /= ceil;\n\t\t\te++;\n\t\t}\n\t}\n\n\treturn {result, e};\n}\n\n/**\n * Optimized precision handling with scientific notation correction\n * @param {number} value - Current value\n * @param {number} precision - Precision to apply\n * @param {number} e - Current exponent\n * @param {number} num - Original number\n * @param {boolean} isDecimal - Whether using decimal base\n * @param {boolean} bits - Whether calculating bits\n * @param {number} ceil - Ceiling value\n * @param {Function} roundingFunc - Rounding function\n * @param {number} round - Round value\n * @returns {Object} Object with value and e properties\n */\nexport function applyPrecisionHandling (value, precision, e, num, isDecimal, bits, ceil, roundingFunc, round) {\n\tlet result = value.toPrecision(precision);\n\n\t// Handle scientific notation by recalculating with incremented exponent\n\tif (result.includes(E) && e < 8) {\n\t\te++;\n\t\tconst {result: valueResult} = calculateOptimizedValue(num, e, isDecimal, bits, ceil);\n\t\tconst p = round > 0 ? Math.pow(10, round) : 1;\n\t\tresult = (p === 1 ? roundingFunc(valueResult) : roundingFunc(valueResult * p) / p).toPrecision(precision);\n\t}\n\n\treturn {value: result, e};\n}\n\n/**\n * Optimized number formatting with locale, separator, and padding\n * @param {number|string} value - Value to format\n * @param {string|boolean} locale - Locale setting\n * @param {Object} localeOptions - Locale options\n * @param {string} separator - Custom separator\n * @param {boolean} pad - Whether to pad\n * @param {number} round - Round value\n * @returns {string|number} Formatted value\n */\nexport function applyNumberFormatting (value, locale, localeOptions, separator, pad, round) {\n\tlet result = value;\n\n\t// Apply locale formatting\n\tif (locale === true) {\n\t\tresult = result.toLocaleString();\n\t} else if (locale.length > 0) {\n\t\tresult = result.toLocaleString(locale, localeOptions);\n\t} else if (separator.length > 0) {\n\t\tresult = result.toString().replace(PERIOD, separator);\n\t}\n\n\t// Apply padding\n\tif (pad && round > 0) {\n\t\tconst resultStr = result.toString();\n\t\tconst x = separator || ((resultStr.match(/(\\D)/g) || []).pop() || PERIOD);\n\t\tconst tmp = resultStr.split(x);\n\t\tconst s = tmp[1] || EMPTY;\n\t\tconst l = s.length;\n\t\tconst n = round - l;\n\n\t\tresult = `${tmp[0]}${x}${s.padEnd(l + n, ZERO)}`;\n\t}\n\n\treturn result;\n}\n","import {\n  ARRAY,\n  BIT,\n  BITS,\n  BYTE,\n  BYTES,\n  EMPTY,\n  EXPONENT,\n  FUNCTION,\n  INVALID_NUMBER,\n  INVALID_ROUND,\n  LOG_10_1000,\n  LOG_2_1024,\n  OBJECT,\n  ROUND,\n  S,\n  SI_KBIT,\n  SI_KBYTE,\n  SPACE,\n  STRING,\n  STRINGS,\n} from \"./constants.js\";\nimport {\n  applyNumberFormatting,\n  applyPrecisionHandling,\n  calculateOptimizedValue,\n  getBaseConfiguration,\n  handleZeroValue,\n} from \"./helpers.js\";\n\n/**\n * Converts a file size in bytes to a human-readable string with appropriate units\n * @param {number|string|bigint} arg - The file size in bytes to convert\n * @param {Object} [options={}] - Configuration options for formatting\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {string|Array|Object|number} Formatted file size based on output option\n * @throws {TypeError} When arg is not a valid number or roundingMethod is invalid\n * @example\n * filesize(1024) // \"1 KB\"\n * filesize(1024, {bits: true}) // \"8 Kb\"\n * filesize(1024, {output: \"object\"}) // {value: 1, symbol: \"KB\", exponent: 1, unit: \"KB\"}\n */\nexport function filesize(\n  arg,\n  {\n    bits = false,\n    pad = false,\n    base = -1,\n    round = 2,\n    locale = EMPTY,\n    localeOptions = {},\n    separator = EMPTY,\n    spacer = SPACE,\n    symbols = {},\n    standard = EMPTY,\n    output = STRING,\n    fullform = false,\n    fullforms = [],\n    exponent = -1,\n    roundingMethod = ROUND,\n    precision = 0,\n  } = {}\n) {\n  let e = exponent,\n    num = Number(arg),\n    result = [],\n    val = 0,\n    rawVal = 0,\n    u = EMPTY;\n\n  // Optimized base & standard configuration lookup\n  const { isDecimal, ceil, actualStandard } = getBaseConfiguration(\n    standard,\n    base\n  );\n\n  const full = fullform === true,\n    neg = num < 0,\n    roundingFunc = Math[roundingMethod];\n\n  if (typeof arg !== \"bigint\" && isNaN(arg)) {\n    throw new TypeError(INVALID_NUMBER);\n  }\n\n  if (typeof roundingFunc !== FUNCTION) {\n    throw new TypeError(INVALID_ROUND);\n  }\n\n  // Flipping a negative number to determine the size\n  if (neg) {\n    num = -num;\n  }\n\n  // Fast path for zero\n  if (num === 0) {\n    return handleZeroValue(\n      precision,\n      actualStandard,\n      bits,\n      symbols,\n      full,\n      fullforms,\n      output,\n      spacer\n    );\n  }\n\n  // Optimized exponent calculation using pre-computed log values\n  if (e === -1 || isNaN(e)) {\n    e = isDecimal\n      ? Math.floor(Math.log(num) / LOG_10_1000)\n      : Math.floor(Math.log(num) / LOG_2_1024);\n    if (e < 0) {\n      e = 0;\n    }\n  }\n\n  // Exceeding supported length, time to reduce & multiply\n  if (e > 8) {\n    if (precision > 0) {\n      precision += 8 - e;\n    }\n    e = 8;\n  }\n\n  if (output === EXPONENT) {\n    return e;\n  }\n\n  // Calculate value with optimized lookup and bits handling\n  const { result: valueResult, e: valueExponent } = calculateOptimizedValue(\n    num,\n    e,\n    isDecimal,\n    bits,\n    ceil\n  );\n  val = valueResult;\n  e = valueExponent;\n\n  // Optimize rounding calculation\n  const p = e > 0 && round > 0 ? Math.pow(10, round) : 1;\n  result[0] = p === 1 ? roundingFunc(val) : roundingFunc(val * p) / p;\n\n  if (result[0] === ceil && e < 8 && exponent === -1) {\n    result[0] = 1;\n    e++;\n  }\n\n  // Apply precision handling\n  if (precision > 0) {\n    const precisionResult = applyPrecisionHandling(\n      result[0],\n      precision,\n      e,\n      num,\n      isDecimal,\n      bits,\n      ceil,\n      roundingFunc,\n      round\n    );\n    result[0] = precisionResult.value;\n    e = precisionResult.e;\n  }\n\n  // Cache symbol lookup\n  const symbolTable = STRINGS.symbol[actualStandard][bits ? BITS : BYTES];\n  u = result[1] =\n    isDecimal && e === 1 ? (bits ? SI_KBIT : SI_KBYTE) : symbolTable[e];\n\n  // Decorating a 'diff'\n  if (neg) {\n    result[0] = -result[0];\n  }\n\n  // Store raw value before any number formatting is applied\n  rawVal = typeof result[0] === \"number\" ? result[0] : parseFloat(result[0]);\n\n  // Applying custom symbol\n  if (symbols[result[1]]) {\n    result[1] = symbols[result[1]];\n  }\n\n  // Apply locale, separator, and padding formatting\n  result[0] = applyNumberFormatting(\n    result[0],\n    locale,\n    localeOptions,\n    separator,\n    pad,\n    round\n  );\n\n  if (full) {\n    result[1] =\n      fullforms[e] ||\n      STRINGS.fullform[actualStandard][e] +\n        (bits ? BIT : BYTE) +\n        (result[0] === 1 ? EMPTY : S);\n  }\n\n  // Optimized return logic\n  if (output === ARRAY) {\n    return result;\n  }\n\n  if (output === OBJECT) {\n    return {\n      value: result[0],\n      rawValue: rawVal,\n      symbol: result[1],\n      exponent: e,\n      unit: u,\n    };\n  }\n\n  return spacer === SPACE ? `${result[0]} ${result[1]}` : result.join(spacer);\n}\n\n/**\n * Creates a partially applied version of filesize with preset options\n * @param {Object} [options={}] - Default options to apply to the returned function\n * @param {boolean} [options.bits=false] - If true, calculates bits instead of bytes\n * @param {boolean} [options.pad=false] - If true, pads decimal places to match round parameter\n * @param {number} [options.base=-1] - Number base (2 for binary, 10 for decimal, -1 for auto)\n * @param {number} [options.round=2] - Number of decimal places to round to\n * @param {string|boolean} [options.locale=\"\"] - Locale for number formatting, true for system locale\n * @param {Object} [options.localeOptions={}] - Additional options for locale formatting\n * @param {string} [options.separator=\"\"] - Custom decimal separator\n * @param {string} [options.spacer=\" \"] - String to separate value and unit\n * @param {Object} [options.symbols={}] - Custom unit symbols\n * @param {string} [options.standard=\"\"] - Unit standard to use (SI, IEC, JEDEC)\n * @param {string} [options.output=\"string\"] - Output format: \"string\", \"array\", \"object\", or \"exponent\"\n * @param {boolean} [options.fullform=false] - If true, uses full unit names instead of abbreviations\n * @param {Array} [options.fullforms=[]] - Custom full unit names\n * @param {number} [options.exponent=-1] - Force specific exponent (-1 for auto)\n * @param {string} [options.roundingMethod=\"round\"] - Math rounding method to use\n * @param {number} [options.precision=0] - Number of significant digits (0 for auto)\n * @returns {Function} A function that takes a file size and returns formatted output\n * @example\n * const formatBytes = partial({round: 1, standard: \"IEC\"});\n * formatBytes(1024) // \"1.0 KiB\"\n * formatBytes(2048) // \"2.0 KiB\"\n */\n// Partial application for functional programming\nexport function partial({\n  bits = false,\n  pad = false,\n  base = -1,\n  round = 2,\n  locale = EMPTY,\n  localeOptions = {},\n  separator = EMPTY,\n  spacer = SPACE,\n  symbols = {},\n  standard = EMPTY,\n  output = STRING,\n  fullform = false,\n  fullforms = [],\n  exponent = -1,\n  roundingMethod = ROUND,\n  precision = 0,\n} = {}) {\n  return (arg) =>\n    filesize(arg, {\n      bits,\n      pad,\n      base,\n      round,\n      locale,\n      localeOptions,\n      separator,\n      spacer,\n      symbols,\n      standard,\n      output,\n      fullform,\n      fullforms,\n      exponent,\n      roundingMethod,\n      precision,\n    });\n}\n"],"names":["IEC","JEDEC","SI","BITS","BYTE","BYTES","ARRAY","OBJECT","STRING","EXPONENT","ROUND","STRINGS","symbol","iec","bits","bytes","jedec","fullform","BINARY_POWERS","DECIMAL_POWERS","LOG_2_1024","Math","log","LOG_10_1000","STANDARD_CONFIGS","isDecimal","ceil","actualStandard","calculateOptimizedValue","num","e","result","filesize","arg","pad","base","round","locale","EMPTY","localeOptions","separator","spacer","symbols","standard","output","fullforms","exponent","roundingMethod","precision","Number","val","rawVal","u","getBaseConfiguration","full","neg","roundingFunc","isNaN","TypeError","toPrecision","value","unit","join","handleZeroValue","floor","valueResult","valueExponent","p","pow","precisionResult","includes","applyPrecisionHandling","symbolTable","parseFloat","toLocaleString","length","toString","replace","resultStr","x","match","pop","tmp","split","s","l","n","padEnd","applyNumberFormatting","rawValue","partial"],"mappings":"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"}